#include <Arduino.h>
#include <Wire.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_BMP085_U.h>
#include <QMC5883LCompass.h>
#include <TinyGPS++.h>
#include <Adafruit_NeoPixel.h>

// Pin Definitions
#define I2C_SDA_PIN 7
#define I2C_SCL_PIN 16
#define GPS_TX_PIN 17
#define GPS_RX_PIN 18
#define LED_PIN 48

// LED Status Colors
#define COLOR_ERROR    0xFF0000  // Red
#define COLOR_WAITING  0xFFFF00  // Yellow
#define COLOR_SUCCESS  0x00FF00  // Green
#define COLOR_INIT     0x0000FF  // Blue

// Sensor Instances
Adafruit_MPU6050 mpu;
Adafruit_BMP085_Unified bmp = Adafruit_BMP085_Unified(10085);
QMC5883LCompass compass;
TinyGPSPlus gps;
Adafruit_NeoPixel pixel(1, LED_PIN, NEO_GRB + NEO_KHZ800);

// UART for GPS
HardwareSerial gpsSerial(1);  // Use UART1

// Global status variables
bool mpuStatus = false;
bool bmpStatus = false;
bool compassStatus = false;
bool gpsStatus = false;

// Function prototypes
void updateLedStatus();
void readGY87Data();
void readGPSData();
void printSensorData();

void setup() {
  // Initialize serial communication
  Serial.begin(115200);
  while (!Serial) delay(10);  // Wait for serial console to open
  
  Serial.println("ESP32 GY87 and GPS Integration");
  
  // Initialize NeoPixel
  pixel.begin();
  pixel.setPixelColor(0, COLOR_INIT);  // Blue during initialization
  pixel.setBrightness(5);
  pixel.show();
  
  // Initialize I2C
  Wire.begin(I2C_SDA_PIN, I2C_SCL_PIN);
  
  // Initialize MPU6050
  Serial.println("Initializing MPU6050...");
  if (mpu.begin()) {
    mpuStatus = true;
    Serial.println("MPU6050 found!");
    
    // Setup MPU6050
    mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
    mpu.setGyroRange(MPU6050_RANGE_500_DEG);
    mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);
  } else {
    Serial.println("Failed to find MPU6050 chip");
  }
  
  // Initialize BMP085
  Serial.println("Initializing BMP085...");
  if (bmp.begin()) {
    bmpStatus = true;
    Serial.println("BMP085 found!");
    
    sensor_t sensor;
    bmp.getSensor(&sensor);
    Serial.print("Sensor: "); Serial.println(sensor.name);
  } else {
    Serial.println("Failed to find BMP085 sensor");
  }
  
  // Initialize QMC5883L Compass
  Serial.println("Initializing QMC5883L Compass...");
  compass.init();
  // There's no proper way to check if compass initialization succeeded,
  // so we'll assume it worked and check data validity later
  compassStatus = true;
  Serial.println("QMC5883L Compass initialized");
  
  // Initialize GPS module
  Serial.println("Initializing GPS module...");
  gpsSerial.begin(9600, SERIAL_8N1, GPS_RX_PIN, GPS_TX_PIN);
  Serial.println("GPS serial initialized");
  
  // Update LED status based on initialization results
  updateLedStatus();
  
  delay(1000);  // Short delay to stabilize sensors
}

void loop() {
  // Read data from all sensors
  // readGY87Data();
  // readGPSData();
  
  // Print data to serial monitor
  printSensorData();
  
  // Update LED status
  updateLedStatus();
  
  // delay(1000);  // Update once per second
}

void updateLedStatus() {
  // if (!mpuStatus || !bmpStatus || !compassStatus) {
  //   // Error state - one or more sensors failed to initialize
  //   pixel.setPixelColor(0, COLOR_ERROR);
  // } else if (!gpsStatus) {
  //   // Waiting state - waiting for GPS fix
  //   pixel.setPixelColor(0, COLOR_WAITING);
  // } else {
  //   // Success state - all sensors working and GPS has fix
  //   pixel.setPixelColor(0, COLOR_SUCCESS);
  // }
  // pixel.show();
}

void readGY87Data() {
  // Read MPU6050 data
  if (mpuStatus) {
    sensors_event_t a, g, temp;
    mpu.getEvent(&a, &g, &temp);
    // Data is stored in the sensors_event_t structures
  }
  
  // Read BMP085 data
  if (bmpStatus) {
    sensors_event_t event;
    bmp.getEvent(&event);
    if (event.pressure) {
      // Calculate altitude
      float seaLevelPressure = SENSORS_PRESSURE_SEALEVELHPA;
      float altitude = bmp.pressureToAltitude(seaLevelPressure, event.pressure);
    }
    
    // Get temperature
    float temperature;
    bmp.getTemperature(&temperature);
  }
  
  // Read Compass data
  if (compassStatus) {
    compass.read();
  }
}

void readGPSData() {
  // Read GPS data
  while (gpsSerial.available() > 0) {
    if (gps.encode(gpsSerial.read())) {
      // Check if we have a valid GPS fix
      if (gps.location.isValid() && gps.date.isValid() && gps.time.isValid()) {
        gpsStatus = true;
      } else {
        gpsStatus = false;
      }
    }
  }
  
  // Check for GPS timeout or other issues
  if (millis() > 10000 && gps.charsProcessed() < 10) {
    Serial.println("GPS not detected. Check wiring.");
    gpsStatus = false;
  }
}

void printSensorData() {
  //Serial.println("------------------------------------");
  while (gpsSerial.available() > 0){
    // get the byte data from the GPS
    byte gpsData = gpsSerial.read();
    Serial.write(gpsData);
  }
  // Serial.println("Sensor Readings:");
  
  // // Print MPU6050 data
  // if (mpuStatus) {
  //   sensors_event_t a, g, temp;
  //   mpu.getEvent(&a, &g, &temp);
    
  //   Serial.println("MPU6050:");
  //   Serial.print("  Acceleration (m/s²): X=");
  //   Serial.print(a.acceleration.x);
  //   Serial.print(", Y=");
  //   Serial.print(a.acceleration.y);
  //   Serial.print(", Z=");
  //   Serial.println(a.acceleration.z);
    
  //   Serial.print("  Rotation (rad/s): X=");
  //   Serial.print(g.gyro.x);
  //   Serial.print(", Y=");
  //   Serial.print(g.gyro.y);
  //   Serial.print(", Z=");
  //   Serial.println(g.gyro.z);
    
  //   Serial.print("  Temperature: ");
  //   Serial.print(temp.temperature);
  //   Serial.println(" °C");
  // } else {
  //   Serial.println("MPU6050: Not available");
  // }
  
  // // Print BMP085 data
  // if (bmpStatus) {
  //   sensors_event_t event;
  //   bmp.getEvent(&event);
    
  //   Serial.println("BMP085:");
  //   if (event.pressure) {
  //     Serial.print("  Pressure: ");
  //     Serial.print(event.pressure);
  //     Serial.println(" hPa");
      
  //     float seaLevelPressure = SENSORS_PRESSURE_SEALEVELHPA;
  //     float altitude = bmp.pressureToAltitude(seaLevelPressure, event.pressure);
  //     Serial.print("  Altitude: ");
  //     Serial.print(altitude);
  //     Serial.println(" m");
  //   } else {
  //     Serial.println("  Pressure sensor error");
  //   }
    
  //   float temperature;
  //   bmp.getTemperature(&temperature);
  //   Serial.print("  Temperature: ");
  //   Serial.print(temperature);
  //   Serial.println(" °C");
  // } else {
  //   Serial.println("BMP085: Not available");
  // }
  
  // // Print Compass data
  // if (compassStatus) {
  //   Serial.println("QMC5883L Compass:");
  //   Serial.print("  X: ");
  //   Serial.print(compass.getX());
  //   Serial.print("  Y: ");
  //   Serial.print(compass.getY());
  //   Serial.print("  Z: ");
  //   Serial.println(compass.getZ());
    
  //   Serial.print("  Azimuth: ");
  //   Serial.print(compass.getAzimuth());
  //   Serial.println(" degrees");
    
  //   const char* directions[] = {"North", "North-East", "East", "South-East", "South", "South-West", "West", "North-West"};
  //   Serial.print("  Direction: ");
  //   Serial.println(directions[compass.getBearing(compass.getAzimuth())]);
  // } else {
  //   Serial.println("QMC5883L Compass: Not available");
  // }
  
  // // Print GPS data
  // Serial.println("GPS Module:");
  // if (gpsStatus) {
  //   Serial.print("  Location: ");
  //   Serial.print(gps.location.lat(), 6);
  //   Serial.print(", ");
  //   Serial.println(gps.location.lng(), 6);
    
  //   Serial.print("  Altitude: ");
  //   Serial.print(gps.altitude.meters());
  //   Serial.println(" m");
    
  //   Serial.print("  Date/Time: ");
  //   Serial.print(gps.date.year());
  //   Serial.print("-");
  //   Serial.print(gps.date.month());
  //   Serial.print("-");
  //   Serial.print(gps.date.day());
  //   Serial.print(" ");
  //   Serial.print(gps.time.hour());
  //   Serial.print(":");
  //   Serial.print(gps.time.minute());
  //   Serial.print(":");
  //   Serial.println(gps.time.second());
    
  //   Serial.print("  Speed: ");
  //   Serial.print(gps.speed.kmph());
  //   Serial.println(" km/h");
    
  //   Serial.print("  Course: ");
  //   Serial.print(gps.course.deg());
  //   Serial.println(" degrees");
    
  //   Serial.print("  Satellites: ");
  //   Serial.println(gps.satellites.value());
  // } else {
  //   Serial.println("  Waiting for GPS fix...");
  // }
  
  //Serial.println("------------------------------------");
}