#include <Arduino.h>
#include <SPI.h>
#include <Wire.h>
#include <ArduinoJson.h>  // Include ArduinoJson library

// Define a structure for our packet
struct Packet {
  String command;
  int value;
  bool isValid;
};

// put function declarations here:
int myFunction(int, int);
Packet deserializeJsonPacket(String jsonString);
String serializePacketToJson(Packet packet);

void setup() {
  // Initialize serial communication
  Serial.begin(115200);
  while (!Serial) continue;  // Wait for serial to connect
  
  // put your setup code here, to run once:
  int result = myFunction(2, 3);
}

void loop() {
  // Check if serial data is available
  if (Serial.available()) {
    // Read the incoming JSON string
    String jsonString = Serial.readStringUntil('\n');
    
    // Deserialize the JSON into a packet
    Packet packet = deserializeJsonPacket(jsonString);
    
    // Process the packet if it's valid
    if (packet.isValid) {
      // Example: do something with the packet
      Serial.print("Command received: ");
      Serial.println(packet.command);
      Serial.print("Value: ");
      Serial.println(packet.value);
      
      // Create a reply packet
      Packet replyPacket;
      replyPacket.command = "reply";
      replyPacket.value = packet.value * 2; // Example: double the received value
      replyPacket.isValid = true;
      
      // Serialize and send the reply
      String replyJson = serializePacketToJson(replyPacket);
      Serial.println(replyJson);
    }
  }
}

// put function definitions here:
int myFunction(int x, int y) {
  return x + y;
}

// Deserialize JSON string to Packet object
Packet deserializeJsonPacket(String jsonString) {
  Packet packet;
  packet.isValid = false;  // Default to invalid
  
  // Create a JSON document
  StaticJsonDocument<200> doc;  // Size depends on your JSON complexity
  
  // Deserialize the JSON
  DeserializationError error = deserializeJson(doc, jsonString);
  
  // Check for errors
  if (error) {
    Serial.print("deserializeJson() failed: ");
    Serial.println(error.c_str());
    return packet;
  }
  
  // Extract values from JSON
  packet.command = doc["command"].as<String>();
  packet.value = doc["value"].as<int>();
  packet.isValid = true;
  
  return packet;
}

// Serialize Packet object to JSON string
String serializePacketToJson(Packet packet) {
  // Create a JSON document
  StaticJsonDocument<200> doc;
  
  // Add values to JSON
  doc["command"] = packet.command;
  doc["value"] = packet.value;
  doc["status"] = packet.isValid ? "success" : "error";
  
  // Serialize JSON to string
  String jsonString;
  serializeJson(doc, jsonString);
  
  return jsonString;
}